<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Jover</title>
  <subtitle>Software &amp; javascript tips and tricks!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexjoverm.github.io/"/>
  <updated>2017-07-17T08:19:31.000Z</updated>
  <id>http://alexjoverm.github.io/</id>
  
  <author>
    <name>Alex Jover Morales</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lazy loading in Vue using Webpack&#39;s code splitting</title>
    <link href="http://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/"/>
    <id>http://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/</id>
    <published>2017-07-15T23:05:47.000Z</published>
    <updated>2017-07-17T08:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>When a <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> app gets large, lazy loading components, routes or <a href="https://vuex.vuejs.org/en" target="_blank" rel="external">Vuex</a> modules using <a href="https://webpack.js.org/guides/lazy-loading/" target="_blank" rel="external">Webpack’s code splitting</a> will boost it by loading pieces of code only when needed.</p>
<a id="more"></a>
<img src="/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/axe.jpg" alt="Axe" title="Axe">
<p>We could apply lazy loading and code splitting in 3 different levels in a Vue app:</p>
<ul>
<li>Components, also known as <a href="https://vuejs.org/v2/guide/components.html#Async-Components" target="_blank" rel="external">async components</a></li>
<li>Router</li>
<li>Vuex modules</li>
</ul>
<p>But there is something they all have in common: they use <a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="external">dynamic import</a>, which is understood by Webpack since version 2.</p>
<h2 id="Lazy-load-in-Vue-components"><a href="#Lazy-load-in-Vue-components" class="headerlink" title="Lazy load in Vue components"></a>Lazy load in Vue components</h2><p>This is well explained in the <a href="https://egghead.io/lessons/load-components-when-needed-with-vue-async-components" target="_blank" rel="external">“Load components when needed with Vue async components”</a> on Egghead.</p>
<p>It’s as simple as using the <code>import</code> function when registering a component:</p>
<pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'AsyncCmp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./AsyncCmp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>And using local registration:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">'AsyncCmp'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./AsyncCmp'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>By wrapping the <code>import</code> function into an arrow function, Vue will execute it only when it gets requested, loading the module in that moment.</p>
<p>If the component importing is using a <a href="http://2ality.com/2014/09/es6-modules-final.html#named-exports-several-per-module" target="_blank" rel="external">named export</a>, you can use object destructuring on the returned Promise. For example, for the UiAlert component from <a href="https://github.com/JosephusPaye/Keen-UI" target="_blank" rel="external">KeenUI</a>:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>
components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  UiAlert<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'keen-ui'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> UiAlert <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> UiAlert<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre>
<h2 id="Lazy-load-in-Vue-router"><a href="#Lazy-load-in-Vue-router" class="headerlink" title="Lazy load in Vue router"></a>Lazy load in Vue router</h2><p>Vue router has built in support for <a href="https://router.vuejs.org/en/advanced/lazy-loading.html" target="_blank" rel="external">lazy loading</a>. It’s as simple as importing your components with the <code>import</code> function. Say we wanna lazy load a Login component in the <em>/login</em> route:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Instead of: import Login from './login'</span>
<span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./login'</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Login <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Lazy-load-a-Vuex-module"><a href="#Lazy-load-a-Vuex-module" class="headerlink" title="Lazy load a Vuex module"></a>Lazy load a Vuex module</h2><p>Vuex has a <code>registerModule</code> method that allow us to dynamically create Vuex modules. If we take into account that <code>import</code> function returns a promise with the ES Module as the payload, we could use it to lazy load a module:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">...</span>

<span class="token comment" spellcheck="true">// Assume there is a "login" module we wanna load</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./store/login'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>loginModule <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span> loginModule<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Lazy loading is made extremely simple with Vue and Webpack. Using what you’ve just read you can start splitting up your app in chunks from different sides and load them when needed, lightening the initial load of the app.</p>
<p>If you like it, please go and share it! You can follow me on this blog or on twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Any questions? Shoot!</p>
]]></content>
    
    <summary type="html">
    
      When a Vue app gets large, lazy loading components, routes or Vuex modules using Webpack&#39;s code splitting will boost it by loading pieces of code only when needed.
    
    </summary>
    
    
      <category term="Vue" scheme="http://alexjoverm.github.io/tags/Vue/"/>
    
      <category term="Vuex" scheme="http://alexjoverm.github.io/tags/Vuex/"/>
    
      <category term="Webpack" scheme="http://alexjoverm.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Integrate TypeScript in your Vue project</title>
    <link href="http://alexjoverm.github.io/2017/06/28/Integrate-TypeScript-in-your-Vue-project/"/>
    <id>http://alexjoverm.github.io/2017/06/28/Integrate-TypeScript-in-your-Vue-project/</id>
    <published>2017-06-28T09:17:45.000Z</published>
    <updated>2017-07-08T10:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>You have a <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> project and you heard about all things <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> can help you with. You decide to start using TypeScript. Here you’ll see how to do that in an approachable and pragmatic way.</p>
<a id="more"></a>
<img src="/2017/06/28/Integrate-TypeScript-in-your-Vue-project/love.jpg" alt="Love" title="Love">
<p>In this article we’ll assume you’re using SFC (Single File Components), but it could work as well even if you’re splitting them into multiple files. So… let’s get started!</p>
<h2 id="Integrating-TypeScript"><a href="#Integrating-TypeScript" class="headerlink" title="Integrating TypeScript"></a>Integrating TypeScript</h2><p>We’re gonna start from <a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">Vue CLI Webpack’s template</a>, but it would work as well with the amazing <a href="https://github.com/vuejs-templates/pwa" target="_blank" rel="external">PWA template</a>. Don’t choose to use ESLint when you’re ask to:</p>
<pre class=" language-bash"><code class="language-bash">vue init webpack my-app <span class="token comment" spellcheck="true"># or: vue init pwa my-app</span>
<span class="token function">cd</span> my-app
</code></pre>
<p>We have to do 4 steps:</p>
<h3 id="1-Create-a-tsconfig-json-file"><a href="#1-Create-a-tsconfig-json-file" class="headerlink" title="1. Create a tsconfig.json file"></a>1. Create a <code>tsconfig.json</code> file</h3><p>Let’s start with something very simple, later we’ll get back to the TypeScript configuration.</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dom"</span><span class="token punctuation">,</span> <span class="token string">"es5"</span><span class="token punctuation">,</span> <span class="token string">"es2015"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>
    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>
    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>
    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"allowSyntheticDefaultImports"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The most important part is the <code>allowSyntheticDefaultImports</code> setting. Since Vue types doesn’t use ES2015 default exports, this setting must be set to by-pass that. You can see more info in <a href="https://code.visualstudio.com/docs/languages/javascript#_common-questions" target="_blank" rel="external">this VSCode docs page</a>.</p>
<p>Setting <code>&quot;module&quot;: &quot;es2015&quot;</code> would make the code <a href="https://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/">tree-shakeable</a> by producing ESM (EcmaScript Modules).</p>
<h3 id="2-Add-ts-loader-and-webpack-tweaks"><a href="#2-Add-ts-loader-and-webpack-tweaks" class="headerlink" title="2. Add ts-loader and webpack tweaks"></a>2. Add <code>ts-loader</code> and webpack tweaks</h3><p>Install <code>typescript</code> an <code>ts-loader</code> with npm:</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D typescript ts-loader
</code></pre>
<p>Then open <code>build/webpack.base.conf.js</code>, and place the following code at <strong>the beginning</strong> of <code>module.rules</code>, right before than <code>vue-loader</code>:</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>
        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules|vue\/src/</span><span class="token punctuation">,</span>
        loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>
        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          appendTsSuffixTo<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">/</span>\<span class="token punctuation">.</span>vue$<span class="token operator">/</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
</code></pre>
<p>In there, rename the entry to <code>.ts</code> and add it to the extensions:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>
entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">:</span> <span class="token string">'./src/main.ts'</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">...</span>
resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token operator">...</span>
</code></pre>
<h3 id="3-Add-es-module-true-to-build-vue-loader-conf-js"><a href="#3-Add-es-module-true-to-build-vue-loader-conf-js" class="headerlink" title="3. Add es-module: true to build/vue-loader.conf.js"></a>3. Add <code>es-module: true</code> to <code>build/vue-loader.conf.js</code></h3><p>That will tell vue-loader to use ES instead of CJS (CommonJS) modules, as describe in <a href="https://github.com/vuejs/vue-loader/blob/master/docs/en/options.md#esmodule" target="_blank" rel="external">vue-loader docs</a>:</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  loaders<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">cssLoaders</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    sourceMap<span class="token punctuation">:</span> isProduction
      <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap
      <span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>cssSourceMap<span class="token punctuation">,</span>
    extract<span class="token punctuation">:</span> isProduction
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  esModule<span class="token punctuation">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="4-Use-TypeScript-in-files"><a href="#4-Use-TypeScript-in-files" class="headerlink" title="4. Use TypeScript in files"></a>4. Use TypeScript in files</h3><p>So you must do 2 things here:</p>
<ul>
<li>Rename <code>.js</code> to <code>.ts</code> extensions within the <code>src</code> folder</li>
<li>Use <code>lang=&quot;ts&quot;</code> on the <code>script</code> tag of you Vue file. For example in <code>App.vue</code>:</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
export default {
  name: 'app'
}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><p>If your editor is yelling at the line <code>import App from &#39;./App&#39;</code> in <code>main.js</code> file about not finding the App module, you can add a <code>vue-shim.d.ts</code> file to your project with the following content:</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">"*.vue"</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> Vue
<span class="token punctuation">}</span>
</code></pre>
<p>I’m using VSCode 1.13.1 and not seeing it, but I’ve seen it before.</p>
<h2 id="TSLint-Prettier…-Goddess"><a href="#TSLint-Prettier…-Goddess" class="headerlink" title="TSLint, Prettier… Goddess!"></a>TSLint, Prettier… Goddess!</h2><p>I’ve recorded <a href="https://egghead.io/lessons/typescript-use-prettier-with-tslint-without-conflicts-c39670eb" target="_blank" rel="external">a 2 min video on Egghead</a> where I explain how you can set up TSLint with Prettier without any conflicts. Go check it out!</p>
<h2 id="Ok-I-can-use-TypeScript…-so-now-what’s-next"><a href="#Ok-I-can-use-TypeScript…-so-now-what’s-next" class="headerlink" title="Ok, I can use TypeScript… so now what’s next?"></a>Ok, I can use TypeScript… so now what’s next?</h2><p>At this point, TypeScript could already point you out to some errors you haven’t noticed before by using built-in and third-party types and gives you a better dev experience by using type inference, as explained in <a href="https://slack.engineering/typescript-at-slack-a81307fa288d" target="_blank" rel="external">TypeScript at Slack</a>, an article telling how Slack moved their codebase to TypeScript.</p>
<p>Still, you must add your own types by using interfaces, types, enums, classes and whatever you need. That way you’ll add more type coverage that TypeScript will use to apply static typing, assuring type safety.</p>
<p>Ideally, you’d use the TypeScript 2.3 <code>strict</code> compiler option in your <code>tsconfig.json</code> because it’ll bring you the most type safety. <a href="https://twitter.com/mariusschulz" target="_blank" rel="external">Marius Schulz</a> has a <a href="https://blog.mariusschulz.com/2017/06/09/typescript-2-3-the-strict-compiler-option" target="_blank" rel="external">well explained article</a> about this. By TypeScript 2.3, the strict option is a group of 4 options, but in future releases it could add more:</p>
<ul>
<li><code>strictNullChecks</code></li>
<li><code>noImplicitAny</code></li>
<li><code>noImplicitThis</code></li>
<li><code>alwaysStrict</code></li>
</ul>
<p>However, if you have a medium/large codebase, using strict option will make you spend really a huge effort and time solving all the type shortage.</p>
<p>For that case, a good way to integrate TypeScript is to start with the most flexible configuration, and as you add more type coverage to your codebase, start to enable individually the flags mentioned above, till you get to the point that you can apply the <code>strict</code> option, so you can approach it in a pragmatic way.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>TypeScript brings you type safety to your codebase from the very start, but the more types you define, the more easy to detect bugs and errors and to make the code maintainable. Vue from version 2 is shipped with typings, so we can make use of them. They become more powerful when you use OOP (Object Oriented Programming) in Vue, but will see that in another post.</p>
<p>If you like it, please go and share it! You can follow me on this blog or on twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Any questions? Shoot!</p>
]]></content>
    
    <summary type="html">
    
      You have a Vue project and you heard about all things TypeScript can help you with. You decide to start using TypeScript. Here you&#39;ll see how to do that in an approachable and pragmatic way.
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
      <category term="Vue" scheme="http://alexjoverm.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Use Prettier with TSLint and be happy</title>
    <link href="http://alexjoverm.github.io/2017/06/12/Use-Prettier-with-TSLint-and-be-happy/"/>
    <id>http://alexjoverm.github.io/2017/06/12/Use-Prettier-with-TSLint-and-be-happy/</id>
    <published>2017-06-12T14:36:23.000Z</published>
    <updated>2017-06-16T15:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/prettier/prettier" target="_blank" rel="external">Prettier</a> support for <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> just landed. Let’s see how <a href="https://github.com/alexjoverm/tslint-config-prettier" target="_blank" rel="external">tslint-config-prettier</a> helps to seamlessly combine it with <a href="https://palantir.github.io/tslint/" target="_blank" rel="external">TSLint</a>.</p>
<a id="more"></a>
<p><strong><em>Wait, a video explaining “Use Prettier with TSLint”?</em> Yes! Check it out on <a href="https://egghead.io/lessons/typescript-use-prettier-with-tslint-without-conflicts-c39670eb" target="_blank" rel="external">Egghead.io</a>!</strong></p>
<p>Recently, <a href="https://twitter.com/Vjeux" target="_blank" rel="external">@vjeux</a>, one of the authors of Prettier, announced TypeScript support in the following tweet:</p>
<div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/Vjeux/status/870670634908475392" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>That’s pretty amazing! I’ve just went and tried it out. I was so impressed by how magic the experience was that I’ve <a href="https://twitter.com/alexjoverm/status/871765191721197568" target="_blank" rel="external">completely removed TSLint</a> from <a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">TypeScript library starter</a>.</p>
<h2 id="The-problem"><a href="#The-problem" class="headerlink" title="The problem"></a>The problem</h2><p>Prettier and TSLint collide, since they both take care of formatting. For the following code, TSLint will give us the error <code>[tslint] Multiple spaces found before &#39;{&#39;. (no-multi-spaces)</code>:</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">DummyClass</span>      <span class="token punctuation">{</span>
  food <span class="token operator">=</span> <span class="token string">'sandwitch'</span>
<span class="token punctuation">}</span>
</code></pre>
<p>But, when we run Prettier, the code is automatically formatted:</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">DummyClass</span> <span class="token punctuation">{</span>
  food <span class="token operator">=</span> <span class="token string">'sandwitch'</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This makes the workflow pretty useless, since we’re getting linting errors that Prettier will solve.</p>
<h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h2><p>It’s very simple:</p>
<blockquote>
<p>Let Prettier take care of code formatting, and TSLint of the rest</p>
</blockquote>
<p>That’s why I’ve created <a href="https://github.com/alexjoverm/tslint-config-prettier" target="_blank" rel="external">tslint-config-prettier</a>. It disables all TSLint formatting related rules, as well as for <a href="https://github.com/palantir/tslint-react" target="_blank" rel="external">tslint-react</a> and <a href="https://github.com/buzinas/tslint-eslint-rules" target="_blank" rel="external">tslint-eslint-rules</a>.</p>
<p>The installation is straightforward, once you setup <a href="https://palantir.github.io/tslint/" target="_blank" rel="external">TSLint</a> and <a href="https://github.com/prettier/prettier" target="_blank" rel="external">Prettier</a>:</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -D tslint-config-prettier
</code></pre>
<p>Add it to the end of your <code>tslint.json</code> file:</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"tslint:latest"</span><span class="token punctuation">,</span>
    <span class="token string">"tslint-config-prettier"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now we can use Prettier and TSLint without any problem!</p>
<img src="/2017/06/12/Use-Prettier-with-TSLint-and-be-happy/prettier.gif" alt="Using Prettier" title="Using Prettier">
<p>I must thank <a href="https://twitter.com/Vjeux/status/871796320792608768" target="_blank" rel="external">@vjeux for pointing me out</a> to this solution and <a href="https://twitter.com/JBlaak" target="_blank" rel="external">@JBlack</a> for the time to <a href="https://github.com/alexjoverm/tslint-config-prettier/pull/1" target="_blank" rel="external">review tslint-config-prettier</a>.</p>
<p>If you liked it, please go and share it! You can follow me on this blog or on twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Any questions? Shoot!</p>
]]></content>
    
    <summary type="html">
    
      Prettier support for TypeScript just landed. Let&#39;s see how tslint-config-prettier helps to seamlessly combine it with TSLint
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Lookup Types: type-safe properties</title>
    <link href="http://alexjoverm.github.io/2017/04/11/Typescript-Lookup-Types-type-safe-properties/"/>
    <id>http://alexjoverm.github.io/2017/04/11/Typescript-Lookup-Types-type-safe-properties/</id>
    <published>2017-04-11T10:55:23.000Z</published>
    <updated>2017-06-13T10:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Typescript 2.1 introduced lookup types. What are they for? In which cases are they useful?</p>
<a id="more"></a>
<p><strong><em>Wait, a video explaining Lookup Types?</em> Yes! Check it out on <a href="https://egghead.io/instructors/alex-jover-morales" target="_blank" rel="external">Egghead.io</a>!</strong></p>
<p>That’s something I was wondering for a while. I read <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html" target="_blank" rel="external">the official docs</a> and <a href="https://blog.mariusschulz.com/2017/01/06/typescript-2-1-keyof-and-lookup-types" target="_blank" rel="external">Marius Schulz post</a> where quite well explain it, but didn’t totally get the use of it. I needed to come across a real world case where I had to use it.</p>
<p>Then I made a <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14867" target="_blank" rel="external">PR to Jest on DefinitelyTyped</a> repository for adding the <code>spyOn</code> function introduced in <a href="https://facebook.github.io/jest/" target="_blank" rel="external">Jest 19</a>. That’s when I finally understood it.</p>
<h2 id="What-exactly-are-Lookup-types"><a href="#What-exactly-are-Lookup-types" class="headerlink" title="What exactly are Lookup types?"></a>What exactly are Lookup types?</h2><p>Basically a lookup type defines an indexed property type of another type. They are created using the <code>keyof</code> operator, which returns an union of string literals:</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Given a Bike type</span>
<span class="token keyword">interface</span> <span class="token class-name">Bike</span> <span class="token punctuation">{</span>
  model<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>
  weight<span class="token punctuation">:</span> <span class="token keyword">number</span>
  ride<span class="token punctuation">:</span> <span class="token keyword">Function</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// Get all prop names of Bike</span>
type BikePropNames <span class="token operator">=</span> keyof Bike <span class="token comment" spellcheck="true">// "model" | "weight" | "ride"</span>

<span class="token comment" spellcheck="true">// We can get the all prop types of Bike as well</span>
type BikePropTypes <span class="token operator">=</span> Bike<span class="token punctuation">[</span>BikePropNames<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "string" | "number" | "Function"</span>
</code></pre>
<p>Typescript infers the string literals by looking up on the types used, either for the <code>keyof</code> operator and element access.</p>
<h3 id="OK…-But-when-can-this-be-useful"><a href="#OK…-But-when-can-this-be-useful" class="headerlink" title="OK… But when can this be useful?"></a>OK… But when can this be useful?</h3><p>Let’s take the <code>jest.spyOn</code> function, as an example. The function works takes an object as a first parameter, and the method you wanna spy on as a second parameter. I’ve <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14867/commits/46f23ff159f5944f09d366b4385b4df9bcef3ed2" target="_blank" rel="external">first wrote</a> it like this:</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">spyOn</span><span class="token punctuation">(</span>object<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span>
</code></pre>
<p>Yes, this would work. But what if, given the <code>Bike</code> example, I use a non-existent method as a second parameter?</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> bike<span class="token punctuation">:</span> Bike <span class="token operator">=</span> <span class="token punctuation">{</span>
  model<span class="token punctuation">:</span> <span class="token string">'Orbea X5'</span><span class="token punctuation">,</span>
  weigth<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  ride<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'riding!!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// No TS error, but it would fail, since 'blabla' is not a method of bike</span>
<span class="token function">spyOn</span><span class="token punctuation">(</span>bike<span class="token punctuation">,</span> <span class="token string">'blabla'</span><span class="token punctuation">)</span>
</code></pre>
<p>This is not type-safe, ts will not complain at all. How can we do this type-safe?</p>
<pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> spyOn<span class="token operator">&lt;</span>O<span class="token punctuation">,</span> M <span class="token keyword">extends</span> <span class="token class-name">keyof</span> O<span class="token operator">></span><span class="token punctuation">(</span>object<span class="token punctuation">:</span> O<span class="token punctuation">,</span> method<span class="token punctuation">:</span> M<span class="token punctuation">)</span>

<span class="token operator">...</span>

<span class="token function">spyOn</span><span class="token punctuation">(</span>bike<span class="token punctuation">,</span> <span class="token string">'blabla'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// now TS throws an error :)</span>
<span class="token function">spyOn</span><span class="token punctuation">(</span>bike<span class="token punctuation">,</span> <span class="token string">'ride'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// This works</span>
</code></pre>
<p>If you still don’t understand the <code>spyOn</code> declaration, basically is saying:</p>
<ul>
<li><code>&lt;O, M extends keyof O&gt;</code>: <code>O</code> is any object, and <code>M</code> is a property of <code>O</code></li>
<li><code>object: O, method: M</code>: we expect <code>O</code> (any object) as a first parameter, and <code>M</code> (a property of <code>O</code> as a second)</li>
</ul>
<p>Do you see now the power of lookup types? You can dynamically generate string literal union types! That’ll make your type definitions much more accurate ;)</p>
<p>If you like it, please go and share it! You can follow me on this blog or on twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Any questions? Shoot!</p>
]]></content>
    
    <summary type="html">
    
      Typescript 2.1 introduced lookup types. What are they for? In which cases are they useful?
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
      <category term="Jest" scheme="http://alexjoverm.github.io/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>Apollo, GraphQL, Vue and Nuxt shenanigans!</title>
    <link href="http://alexjoverm.github.io/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/"/>
    <id>http://alexjoverm.github.io/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/</id>
    <published>2017-03-23T09:46:07.000Z</published>
    <updated>2017-06-13T10:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>What could go wrong by building a hackaton project with <a href="http://dev.apollodata.com/" target="_blank" rel="external">Apollo</a>, <a href="http://graphql.org" target="_blank" rel="external">GraphQL</a>, <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> and <a href="https://nuxtjs.org/" target="_blank" rel="external">Nuxt</a>?</p>
<a id="more"></a>
<img src="/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/hackaton.jpg" alt="Hackaton" title="Hackaton">
<p>Last Friday 17th March 2017, <a href="https://twitter.com/josepramon" target="_blank" rel="external">@josepramon</a>, <a href="https://twitter.com/esclapes" target="_blank" rel="external">@esclapes</a> and I participated together in an internal hackaton of <a href="https://www.coosto.com/en/" target="_blank" rel="external">Coosto</a>. The topic was to create something with the topic “Eindhoven”. It was nice to see the variety of projects presented.</p>
<p>We wanted to play with <a href="http://dev.apollodata.com/" target="_blank" rel="external">Apollo</a>, <a href="http://graphql.org" target="_blank" rel="external">GraphQL</a>, and server-side rendering in <a href="https://vuejs.org/" target="_blank" rel="external">Vue</a> (with <a href="https://nuxtjs.org/" target="_blank" rel="external">Nuxt</a>), to get a feeling on whether it is beneficial to introduce them in the company. So we made <a href="https://github.com/esclapes/coosto-hackathon" target="_blank" rel="external">Dog shit</a>, an app that collects data from <a href="https://data.eindhoven.nl/pages/home/" target="_blank" rel="external">Eindhoven Open Data</a> and <a href="https://developers.google.com/places" target="_blank" rel="external">Google Places API</a> in order to show places in Eindhoven where you can walk your dog, and what’s around.</p>
<p>You can find the result <a href="https://github.com/esclapes/coosto-hackathon" target="_blank" rel="external">project on Github</a>. It has the following architecture:</p>
<img src="/2017/03/23/Apollo-GraphQL-and-Nuxt-shenanigans/diagram.jpg" alt="Dog Shit architecture" title="Dog Shit architecture">
<p><em>Note: opinions in the article are personal and based on this experienced</em></p>
<h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><p><strong><a href="http://graphql.org" target="_blank" rel="external">GraphQL</a></strong> is a query language spec that Facebook developed on 2012. It serves exactly one purpose, and it does it really well:</p>
<blockquote><p>I’ll give the frontend what it’s asking for, and I’ll take care of getting that data in the best way</p>
</blockquote>
<p>It definitely nails that, we were amazed by how powerful is that and how pleasant the developer experience was. GraphQL:</p>
<ul>
<li>Gives you <strong>introspection</strong> and <strong>docs</strong>, given the Json/TypeScript-like language nature. It has a <a href="http://graphql.org/learn/serving-over-http/#graphiql" target="_blank" rel="external">GraphiQL</a> playground system where you can try your queries and see what they expect and return, powerful for development and testing.</li>
<li>There are <a href="http://graphql.org/code/" target="_blank" rel="external">implementations for most of languages</a></li>
<li>Optimized and scalable for that purpose, offering caching and pagination among others.</li>
</ul>
<p>GraphQL is an intermediate layer between your frontend and your backend. That has some <strong>advantages</strong>:</p>
<ul>
<li>You can query/return different data for different frontends. Imagine: your mobile app probably needs less data than your web app, or it needs it with another structure</li>
<li>Helps refactoring legacy systems or moving to microservices, since it acts as a <a href="http://samnewman.io/patterns/architectural/bff/" target="_blank" rel="external">BFF</a> and takes on some responsibilities of an <a href="http://microservices.io/patterns/apigateway.html" target="_blank" rel="external">API Gateway</a> to decouple frontend and backend</li>
</ul>
<p>It is the perfect replacement for traditional homemade BFFs, so you don’t have to:</p>
<ul>
<li>Build a BFF per frontend (GraphQL allows you to query the data you want)</li>
<li>Define hard-contracts between frontend and backend which you have to maintain (unless you build an spec/convention, which would mean building GraphQL from scratch on your own)</li>
<li>Optimize it for the purpose (GraphQL is made for that)</li>
</ul>
<h3 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h3><p>Here again, the experience was quite positive, it complements GraphQL with everything you need.</p>
<p>Apollo is a production ready toolset that powers-up GraphQL. It gives you:</p>
<ul>
<li><a href="http://dev.apollodata.com/" target="_blank" rel="external">GraphQL clients</a> for Android, iOS, Javascript, React, Angular…</li>
<li><a href="http://dev.apollodata.com/tools/#GraphQL-server-amp-tools" target="_blank" rel="external">A production-ready server</a> which extends <a href="http://graphql.org/graphql-js/" target="_blank" rel="external">GraphQL.js server</a></li>
<li><a href="http://dev.apollodata.com/tools/#GraphQL-server-amp-tools" target="_blank" rel="external">Subscriptions</a>, useful for real-time events. This feature feels like still needs some love by the date of writing.</li>
</ul>
<p>One note, the docs were a bit misleading, not by content but more about the structure. For example if was hard to find a simple get started or docs for the apollo client.</p>
<p>We tried <a href="https://github.com/Akryum/vue-apollo" target="_blank" rel="external">vue-apollo</a>, but we didn’t have good experience with it. It is quite opinionated and does some magic, but you lose a lot of control. For our case the <a href="https://github.com/apollographql/apollo-client" target="_blank" rel="external">Apollo Javascript client</a> worked better.</p>
<h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>We felt the power and easyness of Nuxt, but also we got a sour-sweet experience here, let me elaborate on that.</p>
<p><a href="https://nuxtjs.org/" target="_blank" rel="external">Nuxt</a> is a higher-level framework for writing universal Vue applications. It makes very easy to achieve server side rendering and you don’t have to worry about any of the <a href="https://vuejs.org/v2/guide/ssr.html#Build-Process-Routing-and-Vuex-State-Hydration" target="_blank" rel="external">server side rendering considerations</a> such as caching, routing, state, build process, etc. It is driven by conventions which is what makes very easy to don’t care about most things an let the framework manage that.</p>
<p>Those conventions have their pitfalls: when you need something more flexible and more control that you cannot fit to those conventions, then it is not the right tool for you. In our case this is true.</p>
<p>The bottom line is if you can stick to the conventions, is perfect for you. Otherwise you must manage the server side rendering yourself. In the <a href="https://vuejs.org/v2/guide/ssr.html#Build-Process-Routing-and-Vuex-State-Hydration" target="_blank" rel="external">Vue docs</a> you can find some resources to master this for complex applications.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>There are some areas that we didn’t have time for it, such as integrating a state management tool (Redux or Vuex), so we covered the basics in this experiment.</p>
<p>We found Apollo/GraphQL as a very powerful tool for medium and large apps, it does really well what is made for. Nuxt makes building universal Vue apps be a kid game, but first check if it fits properly with your project. Tools that strongly integrate technologies, such as vue-apollo or Nuxt itself, have their advantages, but first check if they are the best solution for your case. If not, you can always use the “raw” tools.</p>
<p>Any questions? Post them below or reach me in Twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Don’t hesitate to sharing it!</p>
]]></content>
    
    <summary type="html">
    
      What could go wrong by building a hackaton project with Apollo, GraphQLhttp://graphql.org, Vue and Nuxt?
    
    </summary>
    
    
      <category term="Vue" scheme="http://alexjoverm.github.io/tags/Vue/"/>
    
      <category term="GraphQL" scheme="http://alexjoverm.github.io/tags/GraphQL/"/>
    
      <category term="Apollo" scheme="http://alexjoverm.github.io/tags/Apollo/"/>
    
      <category term="Personal" scheme="http://alexjoverm.github.io/tags/Personal/"/>
    
  </entry>
  
  <entry>
    <title>Tree shaking with Webpack 2, TypeScript and Babel</title>
    <link href="http://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/"/>
    <id>http://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/</id>
    <published>2017-03-06T09:37:33.000Z</published>
    <updated>2017-06-13T09:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>We’ll see here how to setup <a href="https://webpack.js.org" target="_blank" rel="external">Webpack 2</a>, along with <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> and <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> to achieve dead code elimination with tree-shaking.</p>
<a id="more"></a>
<p>Some time ago I updated <a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">typescript-library-starter</a>, a zero-config starter repo for writting a <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>  library, with <a href="https://webpack.js.org/guides/tree-shaking" target="_blank" rel="external">tree-shaking</a>, <a href="https://github.com/babel/babel-preset-env" target="_blank" rel="external">babel-preset-env</a>, and more:</p>
<div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/alexjoverm/status/838681719993663488" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Right now it uses RollupJS, but same concepts apply. So I thought, why not sharing that to the people? Hope you find it useful and safes you some time I had to spend :)</p>
<h2 id="What-is-really-tree-shaking"><a href="#What-is-really-tree-shaking" class="headerlink" title="What is really tree-shaking?"></a>What is really tree-shaking?</h2><img src="/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/tree.jpeg" alt="Tree" title="Tree">
<p>Tree shaking is an algorithm introduced first by <a href="http://rollupjs.org/" target="_blank" rel="external">RollupJS</a> and also implemented by <a href="https://webpack.js.org/guides/tree-shaking" target="_blank" rel="external">Webpack 2</a> that removes any unused code when bundling your code. It relies on ES2015 modules in order to achieve that.</p>
<p>Let’s see an example. You have a file <code>greetings.js</code>:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* greetings.js */</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Which you import in your <code>index.js</code>:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* index.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> sayHello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./greetings'</span>

<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>We can see that <code>sayBye</code> is not used. When using tree-shaking, that code will be removed from the final bundle. Otherwise it will be included even if it’s not used.</p>
<h2 id="Why-Typescript-Babel"><a href="#Why-Typescript-Babel" class="headerlink" title="Why Typescript + Babel?"></a>Why Typescript + Babel?</h2><p>You have a good explanation in the <a href="https://github.com/alexjoverm/typescript-library-starter#why-using-typescript-and-babel" target="_blank" rel="external">typescript-library-starter repo</a>.</p>
<h2 id="Cool-show-me-how-to-do-it"><a href="#Cool-show-me-how-to-do-it" class="headerlink" title="Cool, show me how to do it!"></a>Cool, show me how to do it!</h2><p>As mentioned, tree-shaking relies on <strong>ES2015 modules</strong>, so we need to make sure we use them. For that:</p>
<ul>
<li>Use ES2015 in TypeScript</li>
<li>Use ES2015 modules in Babel</li>
<li>Just run <code>webpack -p</code> (production mode) and that should be it</li>
</ul>
<h3 id="1-Use-ES2015-in-TypeScript"><a href="#1-Use-ES2015-in-TypeScript" class="headerlink" title="1. Use ES2015 in TypeScript"></a>1. Use ES2015 in TypeScript</h3><p>You need to set <code>&quot;target&quot;: &quot;es2015&quot;</code> in <code>tsconfig.json</code> file. Note that is <strong>not necessary</strong> to set <code>&quot;module&quot;: &quot;es2015&quot;</code>.</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>
        <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>
        <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2016"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        ...
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>More info in <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="external">compiler options TypeScript page</a>.</p>
<h3 id="2-Use-ES2015-modules-in-Babel"><a href="#2-Use-ES2015-modules-in-Babel" class="headerlink" title="2. Use ES2015 modules in Babel"></a>2. Use ES2015 modules in Babel</h3><p>I’d strongly suggest you using <a href="https://github.com/babel/babel-preset-env" target="_blank" rel="external">babel-preset-env</a>. By far the most flexible and useful <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> preset :)</p>
<p>Anyways, whatever preset you use, you must indicate <code>module: false</code> in your <code>.babelrc</code> file:</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari >= 7"</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-Let’s-see-the-results"><a href="#3-Let’s-see-the-results" class="headerlink" title="3. Let’s see the results"></a>3. Let’s see the results</h3><p>Now, when you have your <code>webpack.config.js</code> setup, if you run <code>webpack</code>, you’ll see within the generated output an unused harmony comment, like:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>
<span class="token comment" spellcheck="true">/* unused harmony export sayBye */</span>
<span class="token comment" spellcheck="true">/* harmony export (immutable) */</span> __webpack_exports__<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> sayHello<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// This function isn't used anywhere</span>
<span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre>
<p>And if we run <code>webpack -p</code> for production build, that code will be stripped out. To check that you can search for the string <code>&#39;Bye&#39;</code> on the generated output. It shouldn’t be there.</p>
<h2 id="Try-it-yourself"><a href="#Try-it-yourself" class="headerlink" title="Try it yourself!"></a>Try it yourself!</h2><p><a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">typescript-library-starter</a> uses tree-shaking! Download the repo, follow the instructions and, be curious and try the code we used at the beginning of this article! Right now it uses RollupJS, but same tree-shaking happens when you run <code>npm run build</code>. If you wanna check the Webpack version, check out <a href="https://github.com/alexjoverm/typescript-library-starter/tree/edd71c19b8d1dcd0b42dc19e0e4ee4b8a7216250" target="_blank" rel="external">this commit</a> in particular to see how it was.</p>
<p>If you like it, please go and share it! You can follow me on this blog or on twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Any questions? Shoot!</p>
]]></content>
    
    <summary type="html">
    
      We&#39;ll see here how to setup Webpack 2, along with TypeScript and Babel to achieve dead code elimination with tree-shaking
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
      <category term="Webpack" scheme="http://alexjoverm.github.io/tags/Webpack/"/>
    
  </entry>
  
</feed>
