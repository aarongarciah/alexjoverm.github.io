<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  <subtitle>The modern javascript blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexjoverm.github.io/"/>
  <updated>2017-03-06T17:03:22.000Z</updated>
  <id>http://alexjoverm.github.io/</id>
  
  <author>
    <name>Alex Jover Morales</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tree shaking with Webpack 2, TypeScript and Babel</title>
    <link href="http://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/"/>
    <id>http://alexjoverm.github.io/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/</id>
    <published>2017-03-06T09:37:33.000Z</published>
    <updated>2017-03-06T17:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>We’ll see here how to setup <a href="https://webpack.js.org" target="_blank" rel="external">Webpack 2</a>, along with <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> and <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> to achieve dead code elimination with tree-shaking.</p>
<a id="more"></a>
<p>Last weekend I updated <a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">typescript-library-starter</a>, a zero-config starter repo for writting a <a href="https://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>  library, with <a href="https://webpack.js.org/guides/tree-shaking" target="_blank" rel="external">tree-shaking</a>, <a href="https://github.com/babel/babel-preset-env" target="_blank" rel="external">babel-preset-env</a>, and more:</p>
<div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/alexjoverm/status/838681719993663488" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>So I thought, why not sharing that to the people? Hope you find it useful and safes you some time I had to spend :)</p>
<h2 id="What-is-really-tree-shaking"><a href="#What-is-really-tree-shaking" class="headerlink" title="What is really tree-shaking?"></a>What is really tree-shaking?</h2><img src="/2017/03/06/Tree-shaking-with-Webpack-2-TypeScript-and-Babel/tree.jpeg" alt="Tree" title="Tree">
<p>Tree shaking is an algorithm introduced first by <a href="http://rollupjs.org/" target="_blank" rel="external">RollupJS</a> and also implemented by <a href="https://webpack.js.org/guides/tree-shaking" target="_blank" rel="external">Webpack 2</a> that removes any unused code when bundling your code. It relies on ES2015 modules in order to achieve that.</p>
<p>Let’s see an example. You have a file <code>greetings.js</code>:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* greetings.js */</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Which you import in your <code>index.js</code>:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* index.js */</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> sayHello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./greetings'</span>

<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>We can see that <code>sayBye</code> is not used. When using tree-shaking, that code will be removed from the final bundle. Otherwise it will be included even if it’s not used.</p>
<h2 id="Why-Typescript-Babel"><a href="#Why-Typescript-Babel" class="headerlink" title="Why Typescript + Babel?"></a>Why Typescript + Babel?</h2><p>You have a good explanation in the <a href="https://github.com/alexjoverm/typescript-library-starter#why-using-typescript-and-babel" target="_blank" rel="external">typescript-library-starter repo</a>.</p>
<h2 id="Cool-show-me-how-to-do-it"><a href="#Cool-show-me-how-to-do-it" class="headerlink" title="Cool, show me how to do it!"></a>Cool, show me how to do it!</h2><p>As mentioned, tree-shaking relies on <strong>ES2015 modules</strong>, so we need to make sure we use them. For that:</p>
<ul>
<li>Use ES2015 in TypeScript</li>
<li>Use ES2015 modules in Babel</li>
<li>Just run <code>webpack -p</code> (production mode) and that should be it</li>
</ul>
<h3 id="1-Use-ES2015-in-TypeScript"><a href="#1-Use-ES2015-in-TypeScript" class="headerlink" title="1. Use ES2015 in TypeScript"></a>1. Use ES2015 in TypeScript</h3><p>You need to set <code>&quot;target&quot;: &quot;es2015&quot;</code> in <code>tsconfig.json</code> file. Note that is <strong>not necessary</strong> to set <code>&quot;module&quot;: &quot;es2015&quot;</code>.</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>
        <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2015"</span><span class="token punctuation">,</span>
        <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2016"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        ...
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>More info in <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="external">compiler options TypeScript page</a>.</p>
<h3 id="2-Use-ES2015-modules-in-Babel"><a href="#2-Use-ES2015-modules-in-Babel" class="headerlink" title="2. Use ES2015 modules in Babel"></a>2. Use ES2015 modules in Babel</h3><p>I’d strongly suggest you using <a href="https://github.com/babel/babel-preset-env" target="_blank" rel="external">babel-preset-env</a>. By far the most flexible and useful <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a> preset :)</p>
<p>Anyways, whatever preset you use, you must indicate <code>module: false</code> in your <code>.babelrc</code> file:</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"last 2 versions"</span><span class="token punctuation">,</span> <span class="token string">"safari >= 7"</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-Let’s-see-the-results"><a href="#3-Let’s-see-the-results" class="headerlink" title="3. Let’s see the results"></a>3. Let’s see the results</h3><p>Now, when you have your <code>webpack.config.js</code> setup, if you run <code>webpack</code>, you’ll see within the generated output an unsued harmony comment, like:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>
<span class="token comment" spellcheck="true">/* unused harmony export sayBye */</span>
<span class="token comment" spellcheck="true">/* harmony export (immutable) */</span> __webpack_exports__<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> sayHello<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// This function isn't used anywhere</span>
<span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token operator">...</span>
</code></pre>
<p>And if we run <code>webpack -p</code> for production build, that code will be stripped out. To check that you can search for the string <code>&#39;Bye&#39;</code> on the generated output. It shouldn’t be there.</p>
<h2 id="Try-it-yourself"><a href="#Try-it-yourself" class="headerlink" title="Try it yourself!"></a>Try it yourself!</h2><p><a href="https://github.com/alexjoverm/typescript-library-starter" target="_blank" rel="external">typescript-library-starter</a> uses tree-shaking! Download the repo, follow the instructions and, be curious and try the code we used at the beginning of this article! You can use the commands <code>npm run build:dev</code> and <code>npm run build</code> which calls webpack.</p>
<p>If you like it, please go and share it! You can follow me on this blog or on twitter as <a href="https://twitter.com/alexjoverm" target="_blank" rel="external">@alexjoverm</a>. Any questions? Shoot!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We’ll see here how to setup &lt;a href=&quot;https://webpack.js.org&quot;&gt;Webpack 2&lt;/a&gt;, along with &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; and &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; to achieve dead code elimination with tree-shaking.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Webpack" scheme="http://alexjoverm.github.io/tags/Webpack/"/>
    
      <category term="TypeScript" scheme="http://alexjoverm.github.io/tags/TypeScript/"/>
    
  </entry>
  
</feed>
